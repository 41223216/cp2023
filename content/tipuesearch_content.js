var tipuesearch = {"pages": [{'title': 'About', 'text': ' https://github.com/mdecycu/cmsite  \n', 'tags': '', 'url': 'About.html'}, {'title': 'w5', 'text': '// 包含標準輸出入程式庫的標頭文件\n// https://blog.csdn.net/weixin_38468077/article/details/101069365\n// http://www.gnuplot.info/demo/\n// https://github.com/sysprog21/rv32emu\n// https://github.com/sysprog21/semu\n// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3\n// https://cs61c.org/fa23/\n// https://greenteapress.com/wp/think-python-2e/\n// https://github.com/ecalvadi/c99-examples\n// https://github.com/gouravthakur39/beginners-C-program-examples\n// https://github.com/ergenekonyigit/Numerical-Analysis-Examples\n// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf\n// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf\n// https://jsommers.github.io/cbook/cbook.pdf\n// https://jsommers.github.io/cbook/index.html\n// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf\n// http://cslibrary.stanford.edu/101/EssentialC.pdf\n// https://publications.gbdirect.co.uk/c_book/\n// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf\n// ***** execute on replit\n// cd downloads\n// cc gnuplot_ex1.c -o gnuplot_ex1\n// ./gnuplot_ex1\n#include <stdio.h>\n\n// 主函式\nint main() {\n// Start a Gnuplot process using popen\nFILE *gnuplotPipe = popen("gnuplot -persistent", "w");\nif (!gnuplotPipe) {\nfprintf(stderr, "Failed to start Gnuplot.\\n");\nreturn 1;\n}\n\n// Use Gnuplot plotting commands, specify font and output as PNG\nfprintf(gnuplotPipe, "set terminal png font \'default,10\' size 800,400\\n");\nfprintf(gnuplotPipe, "set output \'./../images/gnuplot_ex1.png\'\\n");\nfprintf(gnuplotPipe, "plot sin(x)");\n// Close popen\npclose(gnuplotPipe);\n\nreturn 0;\n} \n \n clear \n cd downloads\xa0 \n cc gnmplot_ex1.c \n ./a.out \n \n', 'tags': '', 'url': 'w5.html'}, {'title': 'w6', 'text': '\n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = (int)(width*2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_roc_flag(img);\n\n    FILE *outputFile = fopen("./roc_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    int center_x = (int)(width/4);\n    int center_y = (int)(height/4);\n    int sun_radius = (int)(width/8);\n\n    // Colors for the flag\n    red = gdImageColorAllocate(img, 242, 0, 0); // Red color\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue\n\n    // 繪製紅色矩形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n\n    // 繪製藍色矩形區域\n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n\n    // 繪製太陽\n    draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);\n}\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {\n    float angle = 0;\n    int numRays = 12; // 光芒的數量\n\n    gdPoint points[3]; // 三個頂點的陣列\n\n    for (int i = 0; i < numRays; i++) {\n        angle = i * (2 * M_PI / numRays);\n        float x1 = center_x + cos(angle) * sun_radius;\n        float y1 = center_y + sin(angle) * sun_radius;\n\n        // 調整兩個底邊頂點的位置\n      float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);\n      float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);\n      float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);\n      float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);\n\n        // 設定多邊形的三個頂點\n        points[0].x = (int)x1;\n        points[0].y = (int)y1;\n        points[1].x = (int)x2;\n        points[1].y = (int)y2;\n        points[2].x = (int)x3;\n        points[2].y = (int)y3;\n\n        gdImageFilledPolygon(img, points, 3, white);\n    }\n  //外圈\n  gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);\n\n    // 繪製太陽內部\n    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);\n} \n clear \n cd downloads \n cc gd_roc_flag.c -lgd -lm \n ./a.out \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_usa_flag(gdImagePtr img);\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nint main() {\n    int width = 800;\n    int height = (int)(width / 1.9);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_usa_flag(img);\n\n    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时出错。\\n");\n        return 1;\n    }\n\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n\n    return 0;\n}\n\nvoid draw_usa_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    // 国旗颜色\n    red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹\n    blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形\n\n    int stripe_height = height / 13;\n    int stripe_width = width;\n    int star_size = (int)(0.0308 * height); // 星星大小\n\n    for (int y = 0; y < height; y += stripe_height) {\n        if (y / stripe_height % 2 == 0) {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);\n        } else {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);\n        }\n    }\n\n    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);\n\n    int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距\n    int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距\n    int star_start_x = (int)(0.125 * height); // 星星的起始X位置\n    int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置\n\n    for (int row = 0; row < 9; row++) {\n        int starsPerRow = (row % 2 == 0) ? 6 : 5;\n\n        // 计算2、4、6和8排星星的偏移量\n        int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;\n\n        for (int star = 0; star < starsPerRow; star++) {\n            int x = star_start_x + star * star_spacing_x + offset_x;\n\n            // 旋转角度（以弧度为单位）\n            double rotation_angle = M_PI / 5; // 忘記多少度的旋转\n\n            int y = star_start_y + row * star_spacing_y;\n            draw_star(img, x, y, star_size, white, rotation_angle);\n        }\n    }\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n    gdPoint points[10];\n\n    for (int i = 0; i < 10; i++) {\n        double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;\n        int radius = (i % 2 == 0) ? size : size / 2;\n        points[i].x = x + radius * cos(angle);\n        points[i].y = y + radius * sin(angle);\n    }\n\n    // 用指定的颜色填充星星\n    gdImageFilledPolygon(img, points, 10, color);\n} \n clear \n cd downloads \n cc gd_usa_flag.c -lgd -lm \n ./a.out \n \n', 'tags': '', 'url': 'w6.html'}, {'title': 'w7', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_japan_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = 2 * width / 3;\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_japan_flag(img);\n\n    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_japan_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white ;\n    int center_x =  0.5 * width;\n    int center_y =  0.5 * height;\n    int sun_radius = 145 ;\n\n    // Colors for the flag\n    red = gdImageColorAllocate(img, 242, 0, 0); // Red color\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n\n\n    // 繪製白色矩形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n\n\n    // 繪製太陽內部\n    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);\n} \n clear \n cd downloads \n cc japan.c -lgd -lm \n ./a.out \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_chinese_flag(gdImagePtr img);\n\nint main() {\n    int width = 300; // 國旗寬度\n    int height = 200; // 國旗高度\n\n    gdImagePtr im = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(im, 0);\n\n    draw_chinese_flag(im);\n\n    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时出错。\\n");\n        return 1;\n    }\n\n    gdImagePngEx(im, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(im);\n\n    return 0;\n}\n\n// 声明 draw_star 函数\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nvoid draw_chinese_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, yellow;\n\n    // 國旗顏色\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景\n    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星\n\n    // 畫紅色背景\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n\n    // 設置星星的大小和位置\n    int star_size = (int)(0.28 * height);\n    int star_x = (int)(0.165 * width);\n    int star_y = (int)(0.265 * height);\n\n    // 畫大星星\n    draw_star(img, star_x, star_y, star_size, yellow, 11.0);\n\n    // 繪製小星星，位置根據實際國旗比例計算\n    double radius = 0.15 * height;\n    double angle = 360 / 7 * M_PI / 179.0;\n    double rotation = -M_PI / 7.5;\n    int cx = (int)(0.32 * width);\n    int cy = (int)(0.27 * height);\n\n    for (int i = -1; i < 3; i++) {\n        int x = (int)(cx + radius * cos(i * angle + rotation));\n        int y = (int)(cy + radius * sin(i * angle + rotation));\n        draw_star(img, x, y, 19, yellow, M_PI / 5.0);\n    }\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n    gdPoint points[10];\n\n    // 计算星形的五个外点和五个内点\n    double outer_radius = size / 2;\n    double inner_radius = size / 6;\n    double angle = M_PI / 5.0;\n\n    for (int i = 0; i < 10; i++) {\n        double radius = (i % 2 == 0) ? outer_radius : inner_radius;\n        double theta = rotation_angle + i * angle;\n        points[i].x = x + radius * cos(theta);\n        points[i].y = y + radius * sin(theta);\n    }\n\n    // 使用 gdImageFilledPolygon 绘制星形\n    gdImageFilledPolygon(img, points, 10, color);\n} \n cc chinese.c -lgd -lm \n ./a.out \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_uk_flag(gdImagePtr img);\nvoid fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);\n\nint main() {\n    // 设置国旗的宽和高\n    int width = 1200;\n    int height = width / 2;\n\n    // 创建图像\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    // 绘制英国国旗\n    draw_uk_flag(img);\n\n    // 将图像保存到文件\n    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时发生错误。\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\n\n\nvoid draw_uk_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n\n    int red, white, blue;\n    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 153);      // 蓝色\n\n    gdImageFilledRectangle(img, 0, 0, width, height, blue);\n\n\n  int x1, y1, x2, y2, x3, y3;\n  {\n    int line_thickness = 100;\n    gdImageSetThickness(img, line_thickness);\n\n    int x1, y1, x2, y2, x3, y3;\n\n    // 绘制白色斜线\n    x1 = 0;\n    y1 = 600;\n    x2 = 1200;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n    x1 = 0;\n    y1 = 0;\n    x2 = 1200;\n    y2 = 600;\n    gdImageLine(img, x1, y1, x2, y2, white);\n}\n  {\n    int line_thickness = 33;\n    gdImageSetThickness(img, line_thickness);\n\n\n    // 绘制红色斜线\n    x1 = 566;\n    y1 = 300;\n    x2 = 1166;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 1233;\n    y1 = 600;\n    x2 = 633;\n    y2 = 300;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 566;\n    y1 = 300;\n    x2 = -33;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 600;\n    y1 = 316.5;\n    x2 = 0;\n    y2 = 616.5;\n    gdImageLine(img, x1, y1, x2, y2, red);\n  }\n  {\n  int line_thickness = 33;\n  gdImageSetThickness(img, line_thickness);\n\n  int x1, y1, x2, y2, x3, y3;\n\n  // 绘制  斜线\n  x1 = 0;\n  y1 = 600;\n  x2 = 1200;\n  y2 = 0;\n  gdImageLine(img, x1, y1, x2, y2, red );\n\n\n  x1 = 1200;\n    y1 = 16.5;\n    x2 = 600;\n    y2 = 316.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n\n  x1 = 0;\n    y1 = 583.5;\n    x2 = 600;\n    y2 = 283.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n\n  }\n\n    // 绘制白色十字\n    int cross_width = width / 32;\n    int cross_arm_width = width / 32;\n    int center_x = width / 2;\n    int center_y = height / 2;\n\n    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);\n    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);\n\n    // 绘制红色十字\n    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);\n    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);\n} \n cc U.K.c -lgd -lm \n ./a.out \n \n    #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\n#define WIDTH 900\n#define HEIGHT 600\n#define FILENAME "south_korea_flag.png"\n\nint main() {\n    gdImagePtr im;\n    FILE *pngout;\n    int white, black, red, blue;\n\n    im = gdImageCreate(WIDTH, HEIGHT);\n\n    white = gdImageColorAllocate(im, 255, 255, 255);\n    black = gdImageColorAllocate(im, 0, 0, 0);\n    red = gdImageColorAllocate(im, 205, 0, 0);\n    blue = gdImageColorAllocate(im, 0, 56, 168);\n\n    // Background (white)\n    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);\n\n    // Blue Circle (Yin-Yang Symbol)\n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);\n\n    // Red Circle (Yin-Yang Symbol)\n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);\n\n  int circleX = 385;    // 圓心的 X 座標\n  int circleY = 262.5;   // 圓心的 Y 座標\n  int circleRadius = 75;     \n\n  // 繪製圓形\n  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);\n\n  int circleX2 = 515;    // 圓心的 X 座標\n\n int circleY2 = 337.5;\n\n  // 繪製圓形\n  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);\n\n  {\n\n\n  // 起點和終點位置\n\n  int startX = 340;    \n  // 線的起點 X 座標\n\n  int startY = 90;   \n  // 線的起點 Y 座標\n\n  int endX = 200;     \n  // 線的終點 X 座標\n\n  int endY = 260;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 270;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 210;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);\n\n  gdImageSetThickness(im, lineWidth +12);\ngdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);\n}\n  {\n    // 起點和終點位置\n\n  int startX = 330;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 190;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n\n  }\n\n  {\n    // 起點和終點位置\n\n  int startX = 564;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 704;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);\n\ngdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 400, 734, 490, white);\n\n  int startX2 = 553;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 633;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);\n  }\n  {\n    // 起點和終點位置\n\n  int startX = 330;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 190;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n\n  }\n  {\n    // 起點和終點位置\n\n  int startX = 564;    \n  // 線的起點 X 座標\n\n  int startY = 97;   \n  // 線的起點 Y 座標\n\n  int endX = 704;     \n  // 線的終點 X 座標\n\n  int endY = 267;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 212, 734, 118, white);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);\n\n  int startX2 = 553;    \n  // 線的起點 X 座標\n\n  int startY2 = 277;   \n  // 線的起點 Y 座標\n\n  int endX2 = 633;     \n  // 線的終點 X 座標\n\n  int endY2 = 217;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);\n\n    gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);\n\n  }\n\n    // Save image\nFILE *outputFile = fopen("./../images/korea_flag.png", "wb");\nif (outputFile == NULL) {\n    fprintf(stderr, "Error opening the output file.\\n");\n    return 1;\n}\n  gdImagePngEx(im, outputFile, 9);\n      fclose(outputFile);\n      gdImageDestroy(im);\n      return 0;\n  } \n cc korea.c -lgd -lm \n ./a.out \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w12', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nint main() {\n    int width = 800;\n    int height = 600;\n \n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n \n    FILE *outputFile = fopen("hellogd.png", "wb");\n    if (outputFile == NULL) {\n \nfprintf(stderr, "Error opening the output file.\\n");\n \nreturn 1;\n    }\n \n    int red = gdImageColorAllocate(img, 255, 0, 0);\n    int blue = gdImageColorAllocate(img, 0, 0, 255);\n    int black = gdImageColorAllocate(img, 0, 0, 0);\n    int white = gdImageColorAllocate(img, 255, 255, 255);\n    // 長方形塗色\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);\n    // 橢圓形塗色\n    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);\n    // 橢圓形畫線\n    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);\n    // 畫直線\n    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);\n \n    // 多邊形畫線\n    gdPoint points[4];\n    points[0].x = (int)width/4;\n    points[0].y = (int)height*3/4;\n    points[1].x = points[0].x + 100;\n    points[1].y = points[0].y;\n    points[2].x = points[1].x;\n    points[2].y = points[1].y + 100;\n    points[3].x = points[2].x - 100;\n    points[3].y = points[2].y;\n    gdImagePolygon(img, points, 4, black);\n \n    // 多邊形塗色\n    gdPoint points2[4];\n    points2[0].x = (int)width/3;\n    points2[0].y = (int)height/2;\n    points2[1].x = points2[0].x + 100;\n    points2[1].y = points2[0].y;\n    points2[2].x = points2[1].x;\n    points2[2].y = points2[1].y + 100;\n    points2[3].x = points2[2].x - 150;\n    points2[3].y = points2[2].y;\n    gdImageFilledPolygon(img, points2, 4, red);\n \n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n} \n cc hellogd.c -lgd -lm \n ./a.out\xa0 \n', 'tags': '', 'url': 'w12.html'}, {'title': 'w13', 'text': '// 包含標準輸出入程式庫的標頭文件\n#include <stdio.h>\n\xa0\n// 主函式\nint main() {\n\xa0\xa0\xa0\xa0// Open a file to write displacement and velocity data\n\xa0\xa0\xa0\xa0FILE *outputFile = fopen("motion_data.txt", "w");\n\xa0\xa0\xa0\xa0if (!outputFile) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(stderr, "Failed to create data file.\\n");\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return 1;\n\xa0\xa0\xa0\xa0}\n\xa0\n\xa0\xa0\xa0\xa0// Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file\n\xa0\xa0\xa0\xa0double x = 0.2;\xa0 // Initial displacement\n\xa0\xa0\xa0\xa0double v = 0.0;\xa0 // Initial velocity\n\xa0\xa0\xa0\xa0double dt = 0.01; // Time step\n\xa0\xa0\xa0\xa0double t = 0.0;\xa0 // Time\n\xa0\n\xa0\xa0\xa0\xa0while (t <= 10.0) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0v += acceleration * dt;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0x += v * dt;\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0t += dt;\n\xa0\xa0\xa0\xa0}\n\xa0\n\xa0\xa0\xa0\xa0// Close the data file\n\xa0\xa0\xa0\xa0fclose(outputFile);\n\xa0\n\xa0\xa0\xa0\xa0// Start a Gnuplot process using popen\n\xa0\xa0\xa0\xa0FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n\xa0\xa0\xa0\xa0if (!gnuplotPipe) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(stderr, "Failed to start Gnuplot.\\n");\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return 1;\n\xa0\xa0\xa0\xa0}\n\xa0\n\xa0\xa0\xa0\xa0// Use Gnuplot plotting commands, specify font and output as PNG\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n");\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "set output \'./../images/motion_plot.png\'\\n");\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "set title \'Displacement and Velocity vs. Time\'\\n");\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "set xlabel \'Time (s)\'\\n");\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "set ylabel \'Displacement (m)\'\\n");\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'Displacement\', \\\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\'motion_data.txt\' using 1:3 with lines lw 2 title \'Velocity\'\\n");\n\xa0\n\xa0\xa0\xa0\xa0// Close the Gnuplot process\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "exit\\n");\n\xa0\xa0\xa0\xa0pclose(gnuplotPipe);\n\xa0\n\xa0\xa0\xa0\xa0return 0;\n} \n cd downloads cc \xa0 euler_gnuplot_msd_ex1.c \xa0 -lgd -lm ./a.out \n \n \n', 'tags': '', 'url': 'w13.html'}, {'title': 'w15', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n// width 3: height 2\nint width = 1200;\n// 國旗長寬比為 3:2\nint height = (int)(width*2.0 / 3.0);\n\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\ndraw_roc_flag(img);\n\nFILE *outputFile = fopen("roc_flag_in_gd.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\n// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\nint center_x = (int)(width/4);\nint center_y = (int)(height/4);\n// gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n// 由於中央白日圓形的半徑為青天寬度的 1/8\n// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\nint sun_radius = (int)(width/8);\n// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\nint white_circle_dia = sun_radius;\n// 中央藍色圓形半徑為中央白日的 1又 2/15\nint blue_circle_dia = white_circle_dia + white_circle_dia*2/15;\n// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\nred = gdImageColorAllocate(img, 255, 0, 0); // 紅色\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色\nblue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n// 根據畫布大小塗上紅色長方形區域\ngdImageFilledRectangle(img, 0, 0, width, height, red);\n// 青天面積為整面國旗的 1/4, 也是採用長方形塗色\ngdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n{int x1 = 429;\nint y1 = 125;\nint x2 = 279;\nint y2 = 165;\n\n// 畫一條線連接兩個點\ngdImageLine(img, x1, y1, x2, y2, white);\n}\n{int x1 = 170;\nint y1 = 274;\nint x2 = 279;\nint y2 = 165;\n\n// 畫一條線連接兩個點\ngdImageLine(img, x1, y1, x2, y2, white);\n}\n{\nint x1 = 170;\nint y1 = 274;\nint x2 = 429;\nint y2 = 125;\n\n// 畫一條線連接兩個點\ngdImageLine(img, x1, y1, x2, y2, white);\n}\n// 利用一個藍色大圓與白色小圓畫出藍色環狀\ngdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\ngdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\n\n// 定義座標結構\ntypedef struct {\ndouble x;\ndouble y;\n} Point;\n\n// 計算圓與線的交點\nvoid circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) {\n// 直線斜率\ndouble m = (y2 - y1) / (x2 - x1);\n\n// 直線方程式中的常數項\ndouble b = y1 - m * x1;\n\n// 圓與直線交點的計算\ndouble A = 1 + pow(m, 2);\ndouble B = 2 * (m * b - m * k - h);\ndouble C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2);\n\n// 判斷交點個數\ndouble discriminant = pow(B, 2) - 4 * A * C;\nif (discriminant > 0) {\ndouble x_intersect1 = (-B + sqrt(discriminant)) / (2 * A);\ndouble y_intersect1 = m * x_intersect1 + b;\nprintf("交點: (%.2f, %.2f)\\n", x_intersect1, y_intersect1);\n\ndouble x_intersect2 = (-B - sqrt(discriminant)) / (2 * A);\ndouble y_intersect2 = m * x_intersect2 + b;\nprintf("交點: (%.2f, %.2f)\\n", x_intersect2, y_intersect2);\n} else if (discriminant == 0) {\ndouble x_intersect = -B / (2 * A);\ndouble y_intersect = m * x_intersect + b;\nprintf("交點: (%.2f, %.2f)\\n", x_intersect, y_intersect);\n} else {\nprintf("No points.\\n");\n}\n\n}\n\n\n// 圓的參數\ndouble circle_x = (int)(width/4); // 圓心 x 座標\ndouble circle_y = (int)(height/4); // 圓心 y 座標\ndouble radius = white_circle_dia + white_circle_dia*2/15; // 圓半徑\n\n// 兩點座標\n\ndouble x3 = 170;\ndouble y3 = 274;\ndouble x4 = 279;\ndouble y4 = 165;\n\ncircleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3);\n\n\ndouble x5 = 279;\ndouble y5 = 165;\ndouble x6 = 429;\ndouble y6 = 125;\n\ncircleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5);\n\n\n} \n \n cd downloads cc \xa0roc_list_coord_flag .c \xa0 -lgd -lm ./a.out \n \n', 'tags': '', 'url': 'w15.html'}, {'title': 'w16', 'text': '#include <gd.h>\n#include <stdio.h>\n#include <math.h>\n  \n#define WIDTH 800\n#define HEIGHT 600\n#define SCALE 100\n  \n//繪製電阻形狀\nvoid drawResistor(gdImagePtr im, int x1, int y, int width, int height) {\n    int startX = x1 ;\n    int endX = x1 + width ;\n  \n    // 第一段直線向前走一段\n    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));\n  \n    // 向上45度\n    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n  \n    // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n  \n    // 向上90度\n    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n  \n    // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n  \n    // 向上90度\n    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2 , startX + width / 4 + height / 2 + 4 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n  \n    // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2 + 4 * height, y - height / 2, startX + width / 4 + height / 2 + 5 * height, y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n  \n  // 向上45度\n    gdImageLine(im, startX + width / 4 + height / 2 + 5 * height, y + height / 2, startX + width / 4 + height / 2 + 5 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));\n  \n  gdImageLine(im, startX + width / 4 + height / 2 + 5 * height + height / 2, y, startX + width / 4 + height / 2 + 5 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));\n  \n  \n  {\n    int startX = 100;\n  gdImageColorAllocate(im, 0, 0, 255);\n  \n  \n    // 第一段直線向前走一段\n    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));\n  \n    // 向上45度\n    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n  \n    // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n  \n    // 向上90度\n    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n  \n    // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n  \n    // 向上45度\n      gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2, startX + width / 4 + height / 2 + 3 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));\n  \n    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height + height / 2, y, startX + width / 4 + height / 2 + 3 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));\n }\n  \n  {\n    int startX = 585;\n  gdImageColorAllocate(im, 0, 0, 255);\n  \n  \n    // 第一段直線向前走一段\n    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));\n  \n    // 向上45度\n    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n  \n    // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n  \n    // 向上90度\n    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n    // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n  \n    // 向上45度\n      gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2, startX + width / 4 + height / 2 + 3 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));\n  \n    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height + height / 2, y, startX + width / 4 + height / 2 + 3 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));\n  \n    gdImageLine(im, 100, y +20, 700, y +20, gdImageColorAllocate(im, 0, 255, 0));\n  \n}\n}\n  \nint main() {\n    gdImagePtr im;\n    FILE *outputFile;\n  \n    // 創建圖像物件\n    im = gdImageCreateTrueColor(WIDTH, HEIGHT);\n    if (im == NULL) {\n        fprintf(stderr, "Error creating GD image.\\n");\n        return 1;\n    }\n  \n    outputFile = fopen("1.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n  \n    //配置顏色\n    int black, white, red, blue, green;\n  \n    black = gdImageColorAllocate(im, 0, 0, 0);\n    white = gdImageColorAllocate(im, 255, 255, 255);\n    red = gdImageColorAllocate(im, 255, 0, 0);\n    blue = gdImageColorAllocate(im, 0, 0, 255);\ngreen = gdImageColorAllocate(im, 0, 255, 0);\n    gdImageFilledRectangle(im, 0, 0, WIDTH - 1, HEIGHT - 1, white);\n  \n    // 繪製牆面\n    gdImageLine(im, SCALE, SCALE, SCALE, HEIGHT - SCALE, black);\n    gdImageLine(im, WIDTH - SCALE, SCALE, WIDTH - SCALE, HEIGHT - SCALE, black);\n  \n   // 繪製彈簧(電阻)\n    drawResistor(im, WIDTH / 3 + SCALE / 2, HEIGHT / 2, SCALE / 2, SCALE / 4);\n  \n    // 繪製質量（方形）\n    gdImageFilledRectangle(im, WIDTH / 3 - SCALE / 2, HEIGHT / 2 - SCALE / 2, WIDTH / 3 + SCALE / 2, HEIGHT / 2 + SCALE / 2, red);\n    gdImageFilledRectangle(im, WIDTH * 2 / 3 - SCALE / 2, HEIGHT / 2 - SCALE / 2, WIDTH * 2 / 3 + SCALE / 2, HEIGHT / 2 + SCALE / 2, red);\n  \n  gdImageFilledRectangle(im, 100, HEIGHT +300, 700, HEIGHT /2 +49 , black);\n  \n  \n    //生成圖片\n    gdImagePng(im, outputFile);\n    fclose(outputFile);\n    gdImageDestroy(im);\n  \n    return 0;\n} \n \n', 'tags': '', 'url': 'w16.html'}, {'title': 'c_ex', 'text': '#include <stdio.h>\nvoid main()\n{\n /* 印出 Hello */\nprintf("Hello World!");\n} \n \n #include <stdio.h>\nint main()\n{\n/* 印出 Hello World! Bye Bye */\nprintf("Hello World! ");\nprintf("Bye ");\nprintf("Bye");\nreturn 0;\n} \n \n #include <stdio.h>\nint main()\n{\nint a = 1;\nint A = 8;\nint b = 2, c;\nc = A - a + b;\n/* 輸出 a, A, b, c 到螢幕 */\nprintf( "a = %d, A = %d, b = %d, c = %d ", a, A, b, c );\nreturn 0;\n} \n \n #include <stdio.h>\nvoid main()\n{\nfloat a = 0.5;\ndouble b = 1.2;\nint c = 3;\nb = b + a + c;\n/* 輸出 a, b, c 到螢幕 */\nprintf( " a = %3.1f, b = %3.1f, c = %d ", a ,b, c );\n} \n \n #include <stdio.h>\nint main()\n{\nchar x, y;\nx = \'a\';\ny = (char)97;\n/* 輸出 x, y, x, 最後一個是以 ASCII 值顯示 y */\nprintf( " x = %c, y = %c, ASCII of y = %d", x, y, y );\nreturn 0;\n} \n \n #include <stdio.h>\n\xa0\nint main() {\n\xa0\xa0\xa0\xa0int a = 64;\n\xa0\xa0\xa0\xa0int b = 0x40;\n\xa0\xa0\xa0\xa0long c = 64L;\n\xa0\n\xa0\xa0\xa0\xa0printf("%d,%d,%ld", a, b, c);\xa0 // 使用 %ld 來打印 long 整數型別的變數 c\n\xa0\n\xa0\xa0\xa0\xa0return 0;\n} \n \n #include <stdio.h>\nint main()\n{\nint i;\nprintf("Input an integer:");\nscanf( "%d", &i ); /* ch 前面加個 &(位址運算元) */\nprintf( "the number is %d", i );\nreturn 0;\n} \n \n #include<stdio.h>\nint main()\n{\nint a,b;\na = 10; b = 3;\nprintf( "%d \\n", a * b );\nprintf( "%d \\n", a / b );\nprintf( "%d \\n", a + b );\nprintf( "%d \\n", a - b );\nprintf( "%d \\n", a % b );\nreturn 0;\n} \n \n #include <stdio.h>\nint main()\n{\nint a = 10, b = 5;\nprintf( " a == b is %d \\n", a == b );\nprintf( " a > b is %d \\n", a > b );\nprintf( " a < b is %d \\n", a < b );\nprintf( " a >= b is %d \\n", a >= b );\nprintf( " a <= b is %d \\n", a <= b );\nprintf( " a != b is %d \\n", a != b );\nprintf( "\\n" );\nb = 10;\nprintf( " a == b is %d \\n", a == b );\nprintf( " a > b is %d \\n", a > b );\nprintf( " a < b is %d \\n", a < b );\nprintf( " a >= b is %d \\n", a >= b );\nprintf( " a <= b is %d \\n", a <= b );\nprintf( " a != b is %d \\n", a != b );\nreturn 0;\n} \n \n #include<stdio.h>\nvoid main()\n{\nint a,b;\na = 15;\nb = 1;\nprintf("%d \\n", a | b ); /* a OR b */\nprintf("%d \\n", a & b ); /* a AND b */\nprintf("%d \\n", a ^ b ); /* a XOR b */\nprintf("%d \\n", a << 1 ); /* a 位元左移 1 位 */\nprintf("%d \\n", a >> 1 ); /* a 位元右移一位 */\nprintf("%d \\n", ~a ); /* A 的補數運算 */\n} \n \n', 'tags': '', 'url': 'c_ex.html'}, {'title': 'ANSIC', 'text': '', 'tags': '', 'url': 'ANSIC.html'}, {'title': '1.姓名、出生日期和手機號碼', 'text': '\n #include <stdio.h>\n\nint main()  \n{\n    // 列印姓名\n    printf("Name   : James II \\n"); \n\n    // 列印出生日期\n    printf("DOB    : March 12, 2005\\n"); \n\n    // 列印手機號碼\n    printf("Mobile : 99-9999999999\\n"); \n\n    // 表示執行成功\n    return(0); \n} \n \n \n \n', 'tags': '', 'url': '1.姓名、出生日期和手機號碼.html'}, {'title': '2.寫出 C 程式來計算高10英吋、寬10英吋的矩形的周長和面積', 'text': '\n #include <stdio.h> \n\n/* \n   Variables to store the width and height of a rectangle in inches \n*/\nint width;          \nint height;         \n\nint area;           /* Variable to store the area of the rectangle */\nint perimeter;      /* Variable to store the perimeter of the rectangle */\n\nint main() {\n    /* Assigning values to height and width */\n    height = 10;\n    width = 10;\n\n    /* Calculating the perimeter of the rectangle */\n    perimeter = 2*(height + width);\n    printf("Perimeter of the rectangle = %d inches\\n", perimeter);\n\n    /* Calculating the area of the rectangle */\n    area = height * width;\n    printf("Area of the rectangle = %d square inches\\n", area);\n\n    return(0);\n} \n \n \n \n', 'tags': '', 'url': '2.寫出 C 程式來計算高10英吋、寬10英吋的矩形的周長和面積.html'}, {'title': '3.反轉數字', 'text': '\n #include <stdio.h>\n\n// 定義反轉整數的函式\nint reverse(int n) {\n    int d, y = 0;\n    while (n) {\n        d = n % 10;\n        // 檢查溢位情況，以確保反轉後的整數仍在 int 範圍內\n        if ((n > 0 && y > (0x7fffffff - d) / 10) ||\n            (n < 0 && y < ((signed)0x80000000 - d) / 10)) {\n            return 0;  // 如果溢位，則返回 0\n        }\n        y = y * 10 + d;\n        n = n / 10;\n    }\n    return y;  // 返回反轉後的整數\n}\n\nint main(void)\n{\n    int i = 321;\n    printf("原始整數: %d  ", i);\n    printf("\\n反轉後的整數: %d  ", reverse(i));\n\n    return 0;\n} \n \n \n \n', 'tags': '', 'url': '3.反轉數字.html'}, {'title': '4.日期轉換為年、週和日', 'text': '\n #include <stdio.h>\n\nint main()\n{\n    int days, years, weeks;\n\n    days = 3569; // Total number of days\n\n    // Converts days to years, weeks and days\n    years = days/365; // Calculate years\n    weeks = (days % 365)/7; // Calculate weeks\n    days = days - ((years*365) + (weeks*7)); // Calculate remaining days\n\n    // Print the results\n    printf("Years: %d\\n", years);\n    printf("Weeks: %d\\n", weeks);\n    printf("Days: %d \\n", days);\n\n    return 0;\n} \n \n \n', 'tags': '', 'url': '4.日期轉換為年、週和日.html'}, {'title': '5.總和', 'text': '#include<stdio.h>\n\n// 宣告函式原型\nint sumOfRange(int);\n\nint main() \n{\n   int n1;\n   int sum;\n\n   // 提示用戶輸入範圍的最後一個數字\n   printf("\\n\\n 遞迴 : 計算從1到n的數字總和 :\\n");\n   printf("-----------------------------------------------------------\\n");    \n\n   printf(" 輸入範圍的最後一個數字（起始數字為1） : ");\n   scanf("%d", &n1);\n\n   // 呼叫函式計算總和\n   sum = sumOfRange(n1); \n   printf("\\n 1 到 %d 的數字總和 : %d\\n\\n", n1, sum);\n\n   return (0);\n}\n\n// 定義計算範圍內數字總和的函式\nint sumOfRange(int n1) \n{\n   int res;\n   if (n1 == 1) \n   {\n      return (1);\n   } \n   else \n   {\n      // 遞迴呼叫 sumOfRange 函式\n      res = n1 + sumOfRange(n1 - 1);\n   }\n   return (res);\n} \n \n \n \n', 'tags': '', 'url': '5.總和.html'}, {'title': '6.列出前60個自然數', 'text': '#include<stdio.h>\nint  numPrint(int);\nint main()\n{\n    int n = 1;\n    printf("\\n\\n Recursion : print first 50 natural numbers :\\n");\n    printf("-------------------------------------------------\\n"); \n    printf(" The natural numbers are :");\n    numPrint(n);\n    printf("\\n\\n");\n    return 0;\n}\nint numPrint(int n)\n{\n    if(n<=60)\n    {\n         printf(" %d ",n);\n         numPrint(n+1);\n    }\n} \n \n \n', 'tags': '', 'url': '6.列出前60個自然數.html'}, {'title': '7.輸入年份產生日曆', 'text': '#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// 定義版面大小\nint width = 40, year;\nint cols, lead, gap;\n\n// 星期幾\nconst char *wdays[] = { "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" };\n\n// 每個月有幾天\nstruct months {\n  const char *name;\n  int days, start_wday, at;\n} months[12] = {\n  { "January",  31, 0, 0 },\n  { "February", 28, 0, 0 },\n  { "March",    31, 0, 0 },\n  { "April",    30, 0, 0 },\n  { "May",  31, 0, 0 },\n  { "June", 30, 0, 0 },\n  { "July", 31, 0, 0 },\n  { "August",   31, 0, 0 },\n  { "September",    30, 0, 0 },\n  { "October",  31, 0, 0 },\n  { "November", 30, 0, 0 },\n  { "December", 31, 0, 0 }\n};\n\n// 間距\nvoid space(int n) { while (n-- > 0) putchar(\' \'); }\n\n// 初始化月份資訊\nvoid init_months()\n{\n  int i;\n\n  // 判斷閏年\n  if ((!(year % 4) && (year % 100)) || !(year % 400))\n    months[1].days = 29;\n\n  // 計算每個月份的起始星期幾\n  year--;\n  months[0].start_wday = (year * 365 + year/4 - year/100 + year/400 + 1) % 7;\n\n  for (i = 1; i < 12; i++)\n    months[i].start_wday = (months[i-1].start_wday + months[i-1].days) % 7;\n\n  // 計算列數和間距\n  cols = (width + 2) / 22;\n  while (12 % cols) cols--;\n  gap = cols - 1 ? (width - 20 * cols) / (cols - 1) : 0;\n  if (gap > 4) gap = 4;\n  lead = (width - (20 + gap) * cols + gap + 1) / 2;\n  year++;\n}\n\n// 輸出日曆\nvoid print_row(int row)\n{\n  int c, i, from = row * cols, to = from + cols;\n\n  // 輸出月份\n  space(lead);\n  for (c = from; c < to; c++) {\n    i = strlen(months[c].name);\n    space((20 - i)/2);\n    printf("%s", months[c].name);\n    space(20 - i - (20 - i)/2 + ((c == to - 1) ? 0 : gap));\n  }\n  putchar(\'\\n\');\n\n  // 輸出星期幾\n  space(lead);\n  for (c = from; c < to; c++) {\n    for (i = 0; i < 7; i++)\n      printf("%s%s", wdays[i], i == 6 ? "" : " ");\n    if (c < to - 1) space(gap);\n    else putchar(\'\\n\');\n  }\n\n  // 輸出日期\n  while (1) {\n    for (c = from; c < to; c++)\n      if (months[c].at < months[c].days) break;\n    if (c == to) break;\n\n    space(lead);\n    for (c = from; c < to; c++) {\n      for (i = 0; i < months[c].start_wday; i++) space(3);\n      while(i++ < 7 && months[c].at < months[c].days) {\n        printf("%2d", ++months[c].at);\n        if (i < 7 || c < to - 1) putchar(\' \');\n      }\n      while (i++ <= 7 && c < to - 1) space(3);\n      if (c < to - 1) space(gap - 1);\n      months[c].start_wday = 0;\n    }\n    putchar(\'\\n\');\n  }\n  putchar(\'\\n\');\n}\n\n// 輸出整年的日曆\nvoid print_year()\n{\n  int row;\n  char buf[32];\n  sprintf(buf, "%d", year);\n  space((width - strlen(buf)) / 2);\n  printf("%s\\n\\n", buf);\n  for (row = 0; row * cols < 12; row++)\n    print_row(row);\n}\n\n// 檢查年份是否設置\nint main(int c, char **v)\n{\n  int i, year_set = 0;\n\n  // 讀取年份\n  printf("Input a valid year: ");\n  {\n    scanf ("%d", &year);\n    for (i = 1; i < c; i++) {\n  // 檢查是否有設定寬度參數\n   if (!strcmp(v[i], "-w")) {\n  if (++i == c || (width = atoi(v[i])) < 20)\n          goto bail;\n      } else if (!year_set) {\n  // 讀取年份參數\n   if (!sscanf(v[i], "%d", &year) || year <= 0)\n          year = 1969;\n        year_set = 1;\n      } else\n        goto bail;\n    }\n\n    init_months();\n    print_year();\n    return 0;\n\n  bail:\n    fprintf(stderr, "bad args\\nUsage: %s year [-w width (>= 20)]\\n", v[0]);\n    exit(1);\n  }\n} \n \n \n \n \n', 'tags': '', 'url': '7.輸入年份產生日曆.html'}, {'title': '8.猜數字', 'text': '#include<stdio.h>     // 包括標準輸入/輸出頭檔。\n#include<stdlib.h>    // 包含標準庫頭檔。\n#include<time.h>      // 包含用於產生隨機數的時間頭檔。\nint main ()           // 主函數開始。\n{\nint number, input;   // 宣告兩個整數變數「number」和「input」。\nsrand ( time(NULL) );   // 使用當前時間初始化隨機種子。\n\nnumber = rand() % 10 + 1;   // 產生 1 到 10 之間的隨機數並將其儲存在「number」中。\n\ndo {   // do-while 循環的開始。\nprintf ("\\nGuess the number (1 to 10): ");   // 列印一則訊息，提示使用者猜測數字。\nscanf ("%d",&input);    // 讀取用戶的輸入並將其儲存在“input”中。\n\nif (number > input)   // 如果隨機數大於使用者輸入。\nprintf ("The number is higher\\n");   // 列印一條訊息，表示該數字更大。\n\n    } while (number!=input);   // 只要使用者的輸入不等於隨機數就繼續循環。\n\nprintf ("That is correct!\\n\\n");   // 列印一條訊息，表示用戶猜對了。\n\nreturn 0;   // 返回0表示程式執行成功。\n}   // 主函數結束。 \n \n \n', 'tags': '', 'url': '8.猜數字.html'}, {'title': '9.判斷三角形', 'text': '#include <stdio.h> // 包含標準輸入/輸出的標頭文件。\n\nint main()\n{\nint sidea, sideb, sidec; // 宣告三角形的三邊的變數。\n\n/*\n* 讀取三角形的三邊長\n*/\nprintf("輸入三角形的三邊長: "); // 提示使用者輸入。\nscanf("%d %d %d", &sidea, &sideb, &sidec); // 讀取並儲存三角形的三邊。\n\nif (sidea == sideb && sideb == sidec) // 檢查是否所有邊都相等。\n{\nprintf("這是一個等邊三角形。\\n"); // 印出等邊三角形的訊息。\n}\nelse if (sidea == sideb || sidea == sidec || sideb == sidec) // 檢查是否有兩邊相等。\n{\nprintf("這是一個等腰三角形。\\n"); // 印出等腰三角形的訊息。\n}\nelse // 如果沒有邊相等。\n{\nprintf("這是一個不等邊三角形。\\n"); // 印出不等邊三角形的訊息。\n}\n\nreturn 0;\n} \n \n \n', 'tags': '', 'url': '9.判斷三角形.html'}, {'title': '10.檢查一個數字是否為質數', 'text': '#include <stdio.h>\n\n// 函式原型：檢查一個數字是否為質數\nint PrimeOrNot(int);\n\nint main()\n{\n    int n1, prime;\n\n    // 提示用戶輸入正整數\n    printf("\\n\\n 函式：檢查一個數字是否為質數：\\n");\n    printf("---------------------------------------------------------------\\n");    \n\n    printf(" 輸入一個正整數 : ");\n    scanf("%d", &n1);\n\n    // 呼叫函式 PrimeOrNot 檢查是否為質數\n    prime = PrimeOrNot(n1);\n\n    if (prime == 1)\n        printf(" 數字 %d 是一個質數。\\n", n1);\n    else\n        printf(" 數字 %d 不是質數。\\n", n1);\n\n    return 0;\n}\n\n// 函式定義：檢查一個數字是否為質數\nint PrimeOrNot(int n1)\n{\n    int i = 2;\n\n    // 使用迴圈從2開始檢查是否有因數\n    while (i <= n1 / 2)\n    {\n        if (n1 % i == 0)\n            return 0; // 若有因數，返回0表示不是質數\n        else\n            i++;\n    }\n\n    return 1; // 若沒有因數，返回1表示是質數\n}\n \n \n \n', 'tags': '', 'url': '10.檢查一個數字是否為質數.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};